import requests
import time
import csv
import os

ACCESS_TOKEN = "YOUR_HH_TOKEN" # –∏–Ω—Å—Ç—Ä—É–∫–∏—Ü—è –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Ç–æ–∫–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ readme
HEADERS = {"Authorization": f"Bearer {ACCESS_TOKEN}"}

TEST_VACANCIES_FILE = "vacancies_with_tests.csv"
APPLIED_VACANCIES_FILE = "applied_vacancies.csv"

# –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–¥–∞—Ç–µ–ª–µ–π
BLACKLIST = ["Company 1", "Company 2", "Company 1"]

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ ID –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ —Ñ–∞–π–ª–∞
def load_vacancies_from_file(filename):
    vacancy_ids = set()
    if os.path.exists(filename):
        with open(filename, mode="r", encoding="utf-8") as file:
            reader = csv.reader(file)
            next(reader, None)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            for row in reader:
                vacancy_ids.add(row[0])
    return vacancy_ids

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤–∞–∫–∞–Ω—Å–∏–π –≤ —Ñ–∞–π–ª
def save_vacancy_to_file(filename, vacancy_id, vacancy_data):
    with open(filename, mode="a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow([vacancy_id] + vacancy_data)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
applied_vacancies = load_vacancies_from_file(APPLIED_VACANCIES_FILE)
test_vacancies = load_vacancies_from_file(TEST_VACANCIES_FILE)

# –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–∑—é–º–µ
resume_response = requests.get("https://api.hh.ru/resumes/mine", headers=HEADERS)
resume_id = None

if resume_response.status_code == 200:
    resumes = resume_response.json().get("items", [])
    if resumes:
        resume_id = resumes[0]["id"]
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—é–º–µ: {resume_id}")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∑—é–º–µ.")
        exit()
else:
    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ:", resume_response.text)
    exit()

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –ø–æ —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
def is_blacklisted(employer_name):
    if employer_name is None:
        return False  
    return any(word.lower() in employer_name.lower() for word in BLACKLIST)

# –§–ª–∞–≥, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –æ—Ç–∫–ª–∏–∫–∏ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
apply_limit_reached = False

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
while True:
    page = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    total_pages = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–æ–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)

    while page < total_pages:
        params = {
            "text": '"–í–∞–∫–∞–Ω—Å–∏—è 1" OR "–í–∞–∫–∞–Ω—Å–∏—è 2" OR "–í–∞–∫–∞–Ω—Å–∏—è 3"', # –í–ø–∏—Å–∞—Ç—å —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            "area": 113,  # –†–æ—Å—Å–∏—è
            "schedule": "remote",
            "only_with_salary": False,
            "per_page": 20,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Ç–µ—Å—Ç–∞
            "page": page,  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        }

        print(f"üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}")

        response = requests.get("https://api.hh.ru/vacancies", headers=HEADERS, params=params)

        if response.status_code != 200:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π:", response.text)
            break

        data = response.json()
        vacancies = data.get("items", [])
        total_pages = data.get("pages", 1)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

        if not vacancies:
            print("üö´ –í–∞–∫–∞–Ω—Å–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
            break

        for vacancy in vacancies:
            vacancy_id = vacancy["id"]
            vacancy_name = vacancy["name"]
            employer_name = vacancy.get("employer", {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")

            if is_blacklisted(employer_name):
                print(f"üö´ –í–∞–∫–∞–Ω—Å–∏—è '{vacancy_name}' –æ—Ç '{employer_name}' –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ. –ü—Ä–æ–ø—É—â–µ–Ω–∞.")
                continue

            if vacancy_id in applied_vacancies:
                print(f"üîÑ –í–∞–∫–∞–Ω—Å–∏—è '{vacancy_name}' —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ä–∞–Ω–µ–µ. –ü—Ä–æ–ø—É—â–µ–Ω–∞.")
                continue

            if vacancy.get("has_test", False):
                if vacancy_id not in test_vacancies:
                    print(f"üìù –í–∞–∫–∞–Ω—Å–∏—è '{vacancy_name}' —Ç—Ä–µ–±—É–µ—Ç —Ç–µ—Å—Ç–∞. –ó–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.")
                    save_vacancy_to_file(TEST_VACANCIES_FILE, vacancy_id, [
                        vacancy_name,
                        employer_name,
                        vacancy["alternate_url"]
                    ])
                    test_vacancies.add(vacancy_id)
                else:
                    print(f"üîÅ –í–∞–∫–∞–Ω—Å–∏—è '{vacancy_name}' —Å —Ç–µ—Å—Ç–æ–º —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞ —Ä–∞–Ω–µ–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue  

            if apply_limit_reached:
                print("‚è≥ –õ–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–∫–ª–∏–∫–æ–≤.")
                continue

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–∏–∫
            cover_letter = f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ –≤–∞–∫–∞–Ω—Å–∏—è "{vacancy_name}", —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –æ—Ç–ª–∏—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–æ–µ–º—É –æ–ø—ã—Ç—É –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.""" # –¥–æ–ø–æ–ª–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ
            
            apply_response = requests.post("https://api.hh.ru/negotiations", headers=HEADERS, params={
                "vacancy_id": vacancy_id,
                "resume_id": resume_id,
                "message": cover_letter,
            })

            if apply_response.status_code in [200, 201]:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancy_name}")
                save_vacancy_to_file(APPLIED_VACANCIES_FILE, vacancy_id, [])
                applied_vacancies.add(vacancy_id)
            else:
                error_data = apply_response.json()
                if "limit_exceeded" in str(error_data):
                    print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤! –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤.")
                    apply_limit_reached = True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ: {apply_response.text}")

            time.sleep(5)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –æ—Ç–∫–ª–∏–∫–∞–º–∏

        page += 1  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}")

    print("‚åõ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º...")
    time.sleep(60)
